Compressed file contents:
{'astropy/modeling/separable.py': '# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\n\n__all__ = ["is_separable", "separability_matrix"]\n\n\ndef is_separable(transform):\n...\n\ndef separability_matrix(transform):\n...\n\ndef _compute_n_outputs(left, right):\n...\n\ndef _arith_oper(left, right):\n...\n\ndef _coord_matrix(model, pos, noutp):\n...\n\ndef _cstack(left, right):\n...\n\ndef _cdot(left, right):\n...\n\ndef _separable(transform):\n...\n\n# Maps modeling operators to a function computing and represents the\n# relationship of axes as an array of 0-es and 1-s\n_operators = {\'&\': _cstack, \'|\': _cdot, \'+\': _arith_oper, \'-\': _arith_oper,\n              \'*\': _arith_oper, \'/\': _arith_oper, \'**\': _arith_oper}', 'astropy/modeling/fitting.py': '# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\n__all__ = [\'LinearLSQFitter\', \'LevMarLSQFitter\', \'FittingWithOutlierRemoval\',\n           \'SLSQPLSQFitter\', \'SimplexLSQFitter\', \'JointFitter\', \'Fitter\',\n           "ModelLinearityError", "ModelsError"]\n\n\n# Statistic functions implemented in `astropy.modeling.statistic.py\nSTATISTICS = [leastsquare]\n\n# Optimizers implemented in `astropy.modeling.optimizers.py\nOPTIMIZERS = [Simplex, SLSQP]\n\n\nclass Covariance():\n\n    def __init__(self, cov_matrix, param_names):\n...\n    def pprint(self, max_lines, round_val):\n...\n    def __repr__(self):\n...\n    def __getitem__(self, params):\n...\n\nclass StandardDeviations():\n\n    def __init__(self, cov_matrix, param_names):\n...\n    def _calc_stds(self, cov_matrix):\n...\n    def pprint(self, max_lines, round_val):\n...\n    def __repr__(self):\n...\n    def __getitem__(self, param):\n...\n\nclass ModelsError(Exception):\n    pass\n\n\nclass ModelLinearityError(ModelsError):\n    pass\n\n\nclass UnsupportedConstraintError(ModelsError, ValueError):\n    pass\n\n\nclass _FitterMeta(abc.ABCMeta):\n\n    registry = set()\n\n    def __new__(mcls, name, bases, members):\n...\n\ndef fitter_unit_support(func):\n...\n\nclass Fitter(metaclass=_FitterMeta):\n\n    supported_constraints = []\n\n    def __init__(self, optimizer, statistic):\n...\n    def objective_function(self, fps, *args):\n...\n    @staticmethod\n    def _add_fitting_uncertainties(*args):\n...\n    @abc.abstractmethod\n    def __call__(self):\n...\n\n# TODO: I have ongoing branch elsewhere that\'s refactoring this module so that\n# all the fitter classes in here are Fitter subclasses.  In the meantime we\n# need to specify that _FitterMeta is its metaclass.\nclass LinearLSQFitter(metaclass=_FitterMeta):\n\n    supported_constraints = [\'fixed\']\n    supports_masked_input = True\n\n    def __init__(self, calc_uncertainties=False):\n...\n    @staticmethod\n    def _is_invertible(m):\n...\n    def _add_fitting_uncertainties(self, model, a, n_coeff, x, y, z=None,\n                                   resids=None):\n...\n    @staticmethod\n    def _deriv_with_constraints(model, param_indices, x=None, y=None):\n...\n    def _map_domain_window(self, model, x, y=None):\n...\n    @fitter_unit_support\n    def __call__(self, model, x, y, z=None, weights=None, rcond=None):\n...\n\nclass FittingWithOutlierRemoval:\n\n    def __init__(self, fitter, outlier_func, niter=3, **outlier_kwargs):\n...\n    def __str__(self):\n...\n    def __repr__(self):\n...\n    def __call__(self, model, x, y, z=None, weights=None, **kwargs):\n...\n\nclass LevMarLSQFitter(metaclass=_FitterMeta):\n\n    supported_constraints = [\'fixed\', \'tied\', \'bounds\']\n\n    def __init__(self, calc_uncertainties=False):\n...\n    def objective_function(self, fps, *args):\n...\n    @staticmethod\n    def _add_fitting_uncertainties(model, cov_matrix):\n...\n    @fitter_unit_support\n    def __call__(self, model, x, y, z=None, weights=None,\n                 maxiter=DEFAULT_MAXITER, acc=DEFAULT_ACC,\n                 epsilon=DEFAULT_EPS, estimate_jacobian=False):\n...\n    @staticmethod\n    def _wrap_deriv(params, model, weights, x, y, z=None):\n...\n\nclass SLSQPLSQFitter(Fitter):\n\n    supported_constraints = SLSQP.supported_constraints\n\n    def __init__(self):\n...\n    @fitter_unit_support\n    def __call__(self, model, x, y, z=None, weights=None, **kwargs):\n...\n\nclass SimplexLSQFitter(Fitter):\n\n    supported_constraints = Simplex.supported_constraints\n\n    def __init__(self):\n...\n    @fitter_unit_support\n    def __call__(self, model, x, y, z=None, weights=None, **kwargs):\n...\n\nclass JointFitter(metaclass=_FitterMeta):\n\n    def __init__(self, models, jointparameters, initvals):\n...\n    def model_to_fit_params(self):\n...\n    def objective_function(self, fps, *args):\n...\n    def _verify_input(self):\n...\n    def __call__(self, *args):\n...\n\ndef _convert_input(x, y, z=None, n_models=1, model_set_axis=0):\n...\n\n# TODO: These utility functions are really particular to handling\n# bounds/tied/fixed constraints for scipy.optimize optimizers that do not\n# support them inherently; this needs to be reworked to be clear about this\n# distinction (and the fact that these are not necessarily applicable to any\n# arbitrary fitter--as evidenced for example by the fact that JointFitter has\n# its own versions of these)\n# TODO: Most of this code should be entirely rewritten; it should not be as\n# inefficient as it is.\ndef fitter_to_model_params(model, fps):\n...\n\n@deprecated(\'5.1\', \'private method: _fitter_to_model_params has been made public now\')\ndef _fitter_to_model_params(model, fps):\n...\n\ndef model_to_fit_params(model):\n...\n\n@deprecated(\'5.1\', \'private method: _model_to_fit_params has been made public now\')\ndef _model_to_fit_params(model):\n...\n\ndef _validate_constraints(supported_constraints, model):\n...\n\ndef _validate_model(model, supported_constraints):\n...\n\ndef populate_entry_points(entry_points):\n...\n\ndef _populate_ep():\n', 'astropy/modeling/rotations.py': '# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\n__all__ = [\'RotateCelestial2Native\', \'RotateNative2Celestial\', \'Rotation2D\',\n           \'EulerAngleRotation\', \'RotationSequence3D\', \'SphericalRotationSequence\']\n\n\ndef _create_matrix(angles, axes_order):\n...\n\ndef spherical2cartesian(alpha, delta):\n...\n\ndef cartesian2spherical(x, y, z):\n...\n\nclass RotationSequence3D(Model):\n    standard_broadcasting = False\n    _separable = False\n    n_inputs = 3\n    n_outputs = 3\n\n    angles = Parameter(default=[], getter=_to_orig_unit, setter=_to_radian, description="Angles of rotation in deg in the order of axes_order")\n\n    def __init__(self, angles, axes_order, name=None):\n...\n    @property\n    def inverse(self):\n...\n    def evaluate(self, x, y, z, angles):\n...\n\nclass SphericalRotationSequence(RotationSequence3D):\n    def __init__(self, angles, axes_order, name=None, **kwargs):\n...\n    @property\n    def n_inputs(self):\n...\n    @property\n    def n_outputs(self):\n...\n    def evaluate(self, lon, lat, angles):\n...\n\nclass _EulerRotation:\n\n    _separable = False\n\n    def evaluate(self, alpha, delta, phi, theta, psi, axes_order):\n...\n    _input_units_strict = True\n\n    _input_units_allow_dimensionless = True\n\n    @property\n    def input_units(self):\n...\n    @property\n    def return_units(self):\n...\n\nclass EulerAngleRotation(_EulerRotation, Model):\n\n    n_inputs = 2\n    n_outputs = 2\n\n    phi = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian,\n    description="1st Euler angle (Quantity or value in deg)")\n    theta = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian,\n    description="2nd Euler angle (Quantity or value in deg)")\n    psi = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian,\n    description="3rd Euler angle (Quantity or value in deg)")\n\n    def __init__(self, phi, theta, psi, axes_order, **kwargs):\n...\n    @property\n    def inverse(self):\n...\n    def evaluate(self, alpha, delta, phi, theta, psi):\n...\n\nclass _SkyRotation(_EulerRotation, Model):\n\n    lon = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian, description="Latitude")\n    lat = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian, description="Longtitude")\n    lon_pole = Parameter(default=0, getter=_to_orig_unit, setter=_to_radian, description="Longitude of a pole")\n\n    def __init__(self, lon, lat, lon_pole, **kwargs):\n...\n    def _evaluate(self, phi, theta, lon, lat, lon_pole):\n...\n\nclass RotateNative2Celestial(_SkyRotation):\n\n    n_inputs = 2\n    n_outputs = 2\n\n    @property\n    def input_units(self):\n...\n    @property\n    def return_units(self):\n...\n    def __init__(self, lon, lat, lon_pole, **kwargs):\n...\n    def evaluate(self, phi_N, theta_N, lon, lat, lon_pole):\n...\n    @property\n    def inverse(self):\n...\n\nclass RotateCelestial2Native(_SkyRotation):\n    n_inputs = 2\n    n_outputs = 2\n\n    @property\n    def input_units(self):\n...\n    @property\n    def return_units(self):\n...\n    def __init__(self, lon, lat, lon_pole, **kwargs):\n...\n    def evaluate(self, alpha_C, delta_C, lon, lat, lon_pole):\n...\n    @property\n    def inverse(self):\n...\n\nclass Rotation2D(Model):\n    n_inputs = 2\n    n_outputs = 2\n\n    _separable = False\n\n    angle = Parameter(default=0.0, getter=_to_orig_unit, setter=_to_radian,\n    description="Angle of rotation (Quantity or value in deg)")\n\n    def __init__(self, angle=angle, **kwargs):\n...\n    @property\n    def inverse(self):\n...\n    @classmethod\n    def evaluate(cls, x, y, angle):\n...\n    @staticmethod\n    def _compute_matrix(angle):\n'}














Model found locs
['path: astropy/modeling/separable.py\nfunction: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable']














Results Dict (contains filenames)
{'astropy/modeling/separable.py': [], 'astropy/modeling/fitting.py': [], 'astropy/modeling/rotations.py': []}


Locs:
['path: astropy/modeling/separable.py\nfunction: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable']


Current Line:
path: astropy/modeling/separable.py
processed: astropy/modeling/separable.pyCurrent Line:
function: separability_matrix
processed: separability_matrixCurr filename found in resultsCurrent Line:
function: _compute_n_outputs
processed: _compute_n_outputsCurr filename found in resultsCurrent Line:
function: _arith_oper
processed: _arith_operCurr filename found in resultsCurrent Line:
function: _coord_matrix
processed: _coord_matrixCurr filename found in resultsCurrent Line:
function: _cstack
processed: _cstackCurr filename found in resultsCurrent Line:
function: _cdot
processed: _cdotCurr filename found in resultsCurrent Line:
function: _separable
processed: _separableCurr filename found in resultsModel Found Locs Separated:
['function: separability_matrix\nfunction: _compute_n_outputs\nfunction: _arith_oper\nfunction: _coord_matrix\nfunction: _cstack\nfunction: _cdot\nfunction: _separable']


['']


['']


Results Dict (contains filenames)
{'astropy/modeling/separable.py': [], 'astropy/modeling/fitting.py': [], 'astropy/modeling/rotations.py': []}


Locs:
['path: astropy/modeling/separable.py\nline: 97\nline: 98\nline: 99\nline: 100\nline: 101\nline: 313\nline: 314\nline: 315\nline: 316']


Current Line:
path: astropy/modeling/separable.py
processed: astropy/modeling/separable.pyCurrent Line:
line: 97
processed: 97Curr filename found in resultsCurrent Line:
line: 98
processed: 98Curr filename found in resultsCurrent Line:
line: 99
processed: 99Curr filename found in resultsCurrent Line:
line: 100
processed: 100Curr filename found in resultsCurrent Line:
line: 101
processed: 101Curr filename found in resultsCurrent Line:
line: 313
processed: 313Curr filename found in resultsCurrent Line:
line: 314
processed: 314Curr filename found in resultsCurrent Line:
line: 315
processed: 315Curr filename found in resultsCurrent Line:
line: 316
processed: 316Curr filename found in resultsModel Found Locs Separated:
['line: 97\nline: 98\nline: 99\nline: 100\nline: 101\nline: 313\nline: 314\nline: 315\nline: 316']


['']


['']


Results Dict (contains filenames)
{}


Locs:
['path: astropy/io/ascii/core.py\nclass: RST']


Current Line:
path: astropy/io/ascii/core.py
processed: astropy/io/ascii/core.pyCurrent Line:
class: RST
processed: RSTModel Found Locs Separated:
