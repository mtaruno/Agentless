
Please look through the following GitHub Problem Description and the Skeleton of Relevant Files.
Identify all locations that need inspection or editing to fix the problem, including directly related areas as well as any potentially related global variables, functions, and classes.
For each location you provide, either give the name of the class, the name of a method in a class, the name of a function, or the name of a global variable.

### GitHub Problem Description ###
ascii.qdp Table format assumes QDP commands are upper case
### Description

ascii.qdp assumes that commands in a QDP file are upper case, for example, for errors they must be "READ SERR 1 2" whereas QDP itself is not case sensitive and case use "read serr 1 2". 

As many QDP files are created by hand, the expectation that all commands be all-caps should be removed.

### Expected behavior

The following qdp file should read into a `Table` with errors, rather than crashing.
```
read serr 1 2 
1 0.5 1 0.5
```

### How to Reproduce

Create a QDP file:
```
> cat > test.qdp
read serr 1 2 
1 0.5 1 0.5
<EOF>

 > python
Python 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> from astropy.table import Table
>>> Table.read('test.qdp',format='ascii.qdp')
WARNING: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]
Traceback (most recent call last):
...
    raise ValueError(f'Unrecognized QDP line: {line}')
ValueError: Unrecognized QDP line: read serr 1 2
```

Running "qdp test.qdp" works just fine.


### Versions

Python 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)]
astropy 5.1
Numpy 1.24.1
pyerfa 2.0.0.1
Scipy 1.10.0
Matplotlib 3.6.3



### Skeleton of Relevant Files ###

### PATH: astropy/io/ascii/qdp.py
# Licensed under a 3-clause BSD style license - see LICENSE.rst


def _line_type(line, delimiter=None):
...

def _get_type_from_list_of_lines(lines, delimiter=None):
...

def _get_lines_from_file(qdp_file):
...

def _interpret_err_lines(err_specs, ncols, names=None):
...

def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):
...

def _understand_err_col(colnames):
...

def _read_table_qdp(qdp_file, names=None, table_id=None, delimiter=None):
...

def _write_table_qdp(table, filename=None, err_specs=None):
...

class QDPSplitter(core.DefaultSplitter):

    delimiter = " "


class QDPHeader(basic.CommentedHeaderHeader):

    splitter_class = QDPSplitter
    comment = "!"
    write_comment = "!"


class QDPData(basic.BasicData):

    splitter_class = QDPSplitter
    fill_values = [(core.masked, "NO")]
    comment = "!"
    write_comment = None


class QDP(basic.Basic):

    _format_name = "qdp"
    _io_registry_can_write = True
    _io_registry_suffix = ".qdp"
    _description = "Quick and Dandy Plotter"

    header_class = QDPHeader
    data_class = QDPData

    def __init__(self, table_id=None, names=None, err_specs=None, sep=None):
...
    def read(self, table):
...
    def write(self, table):


### PATH: astropy/table/table.py
# Licensed under a 3-clause BSD style license - see LICENSE.rst

_implementation_notes = """
This string has informal notes concerning Table implementation for developers.

Things to remember:

- Table has customizable attributes ColumnClass, Column, MaskedColumn.
  Table.Column is normally just column.Column (same w/ MaskedColumn)
  but in theory they can be different.  Table.ColumnClass is the default
  class used to create new non-mixin columns, and this is a function of
  the Table.masked attribute.  Column creation / manipulation in a Table
  needs to respect these.

- Column objects that get inserted into the Table.columns attribute must
  have the info.parent_table attribute set correctly.  Beware just dropping
  an object into the columns dict since an existing column may
  be part of another Table and have parent_table set to point at that
  table.  Dropping that column into `columns` of this Table will cause
  a problem for the old one so the column object needs to be copied (but
  not necessarily the data).

  Currently replace_column is always making a copy of both object and
  data if parent_table is set.  This could be improved but requires a
  generic way to copy a mixin object but not the data.

- Be aware of column objects that have indices set.

- `cls.ColumnClass` is a property that effectively uses the `masked` attribute
  to choose either `cls.Column` or `cls.MaskedColumn`.
"""

__doctest_skip__ = [
    "Table.read",
    "Table.write",
    "Table._read",
    "Table.convert_bytestring_to_unicode",
    "Table.convert_unicode_to_bytestring",
]

__doctest_requires__ = {"*pandas": ["pandas>=1.1"]}

_pprint_docs = """
    {__doc__}

    Parameters
    ----------
    max_lines : int or None
        Maximum number of lines in table output.

    max_width : int or None
        Maximum character width of output.

    show_name : bool
        Include a header row for column names. Default is True.

    show_unit : bool
        Include a header row for unit.  Default is to show a row
        for units only if one or more columns has a defined value
        for the unit.

    show_dtype : bool
        Include a header row for column dtypes. Default is False.

    align : str or list or tuple or None
        Left/right alignment of columns. Default is right (None) for all
        columns. Other allowed values are '>', '<', '^', and '0=' for
        right, left, centered, and 0-padded, respectively. A list of
        strings can be provided for alignment of tables with multiple
        columns.
    """

_pformat_docs = """
    {__doc__}

    Parameters
    ----------
    max_lines : int or None
        Maximum number of rows to output

    max_width : int or None
        Maximum character width of output

    show_name : bool
        Include a header row for column names. Default is True.

    show_unit : bool
        Include a header row for unit.  Default is to show a row
        for units only if one or more columns has a defined value
        for the unit.

    show_dtype : bool
        Include a header row for column dtypes. Default is True.

    html : bool
        Format the output as an HTML table. Default is False.

    tableid : str or None
        An ID tag for the table; only used if html is set.  Default is
        "table{id}", where id is the unique integer id of the table object,
        id(self)

    align : str or list or tuple or None
        Left/right alignment of columns. Default is right (None) for all
        columns. Other allowed values are '>', '<', '^', and '0=' for
        right, left, centered, and 0-padded, respectively. A list of
        strings can be provided for alignment of tables with multiple
        columns.

    tableclass : str or list of str or None
        CSS classes for the table; only used if html is set.  Default is
        None.

    Returns
    -------
    lines : list
        Formatted table as a list of strings.
    """


class TableReplaceWarning(UserWarning):

    pass


def descr(col):
...

def has_info_class(obj, cls):
...

def _get_names_from_list_of_dict(rows):
...

# Note to future maintainers: when transitioning this to dict
# be sure to change the OrderedDict ref(s) in Row and in __len__().


class TableColumns(OrderedDict):

    def __init__(self, cols={}):
...
    def __getitem__(self, item):
...
    def __setitem__(self, item, value, validated=False):
...
    def __repr__(self):
...
    def _rename_column(self, name, new_name):
...
    def __delitem__(self, name):
...
    def isinstance(self, cls):
...
    def not_isinstance(self, cls):
...

class TableAttribute(MetaAttribute):
    pass


class PprintIncludeExclude(TableAttribute):

    def __get__(self, instance, owner_cls):
...
    def __set__(self, instance, names):
...
    def __call__(self):
...
    def __repr__(self):
...
    def _add_remove_setup(self, names):
...
    def add(self, names):
...
    def remove(self, names):
...
    def _remove(self, names, raise_exc=False):
...
    def _rename(self, name, new_name):
...
    def set(self, names):
...

class Table:

    meta = MetaData(copy=False)

    # Define class attributes for core container objects to allow for subclass
    # customization.
    Row = Row
    Column = Column
    MaskedColumn = MaskedColumn
    TableColumns = TableColumns
    TableFormatter = TableFormatter

    # Unified I/O read and write methods from .connect
    read = UnifiedReadWriteMethod(TableRead)
    write = UnifiedReadWriteMethod(TableWrite)

    pprint_exclude_names = PprintIncludeExclude()
    pprint_include_names = PprintIncludeExclude()

    def as_array(self, keep_byteorder=False, names=None):
...
    def __init__(
        self,
        data=None,
        masked=False,
        names=None,
        dtype=None,
        meta=None,
        copy=True,
        rows=None,
        copy_indices=True,
        units=None,
        descriptions=None,
        **kwargs,
    ):
...
    def _set_column_attribute(self, attr, values):
...
    def __getstate__(self):
...
    def __setstate__(self, state):
...
    @property
    def mask(self):
...
    @mask.setter
    def mask(self, val):
...
    @property
    def _mask(self):
...
    def filled(self, fill_value=None):
...
    @property
    def indices(self):
...
    @property
    def loc(self):
...
    @property
    def loc_indices(self):
...
    @property
    def iloc(self):
...
    def add_index(self, colnames, engine=None, unique=False):
...
    def remove_indices(self, colname):
...
    def index_mode(self, mode):
...
    def __array__(self, dtype=None):
...
    def _check_names_dtype(self, names, dtype, n_cols):
...
    def _init_from_list_of_dicts(self, data, names, dtype, n_cols, copy):
...
    def _init_from_list(self, data, names, dtype, n_cols, copy):
...
    def _convert_data_to_col(
        self, data, copy=True, default_name=None, dtype=None, name=None
    ):
...
    def _init_from_ndarray(self, data, names, dtype, n_cols, copy):
...
    def _init_from_dict(self, data, names, dtype, n_cols, copy):
...
    def _get_col_cls_for_table(self, col):
...
    def _convert_col_for_table(self, col):
...
    def _init_from_cols(self, cols):
...
    def _new_from_slice(self, slice_):
...
    @staticmethod
    def _make_table_from_cols(table, cols, verify=True, names=None):
...
    def _set_col_parent_table_and_mask(self, col):
...
    def itercols(self):
...
    def _base_repr_(
        self,
        html=False,
        descr_vals=None,
        max_width=None,
        tableid=None,
        show_dtype=True,
        max_lines=None,
        tableclass=None,
    ):
...
    def _repr_html_(self):
...
    def __repr__(self):
...
    def __str__(self):
...
    def __bytes__(self):
...
    @property
    def has_mixin_columns(self):
...
    @property
    def has_masked_columns(self):
...
    @property
    def has_masked_values(self):
...
    def _is_mixin_for_table(self, col):
...
    @format_doc(_pprint_docs)
    def pprint(
        self,
        max_lines=None,
        max_width=None,
        show_name=True,
        show_unit=None,
        show_dtype=False,
        align=None,
    ):
...
    @format_doc(_pprint_docs)
    def pprint_all(
        self,
        max_lines=-1,
        max_width=-1,
        show_name=True,
        show_unit=None,
        show_dtype=False,
        align=None,
    ):
...
    def _make_index_row_display_table(self, index_row_name):
...
    def show_in_notebook(
        self,
        tableid=None,
        css=None,
        display_length=50,
        table_class="astropy-default",
        show_row_index="idx",
    ):
...
    def show_in_browser(
        self,
        max_lines=5000,
        jsviewer=False,
        browser="default",
        jskwargs={"use_local_files": True},
        tableid=None,
        table_class="display compact",
        css=None,
        show_row_index="idx",
    ):
...
    @format_doc(_pformat_docs, id="{id}")
    def pformat(
        self,
        max_lines=None,
        max_width=None,
        show_name=True,
        show_unit=None,
        show_dtype=False,
        html=False,
        tableid=None,
        align=None,
        tableclass=None,
    ):
...
    @format_doc(_pformat_docs, id="{id}")
    def pformat_all(
        self,
        max_lines=-1,
        max_width=-1,
        show_name=True,
        show_unit=None,
        show_dtype=False,
        html=False,
        tableid=None,
        align=None,
        tableclass=None,
    ):
...
    def more(
        self,
        max_lines=None,
        max_width=None,
        show_name=True,
        show_unit=None,
        show_dtype=False,
    ):
...
    def __getitem__(self, item):
...
    def __setitem__(self, item, value):
...
    def __delitem__(self, item):
...
    def _ipython_key_completions_(self):
...
    def field(self, item):
...
    @property
    def masked(self):
...
    @masked.setter
    def masked(self, masked):
...
    def _set_masked(self, masked):
...
    @property
    def ColumnClass(self):
...
    @property
    def dtype(self):
...
    @property
    def colnames(self):
...
    @staticmethod
    def _is_list_or_tuple_of_str(names):
...
    def keys(self):
...
    def values(self):
...
    def items(self):
...
    def __len__(self):
...
    def __or__(self, other):
...
    def __ior__(self, other):
...
    def index_column(self, name):
...
    def add_column(
        self,
        col,
        index=None,
        name=None,
        rename_duplicate=False,
        copy=True,
        default_name=None,
    ):
...
    def add_columns(
        self, cols, indexes=None, names=None, copy=True, rename_duplicate=False
    ):
...
    def _replace_column_warnings(self, name, col):
...
    def replace_column(self, name, col, copy=True):
...
    def remove_row(self, index):
...
    def remove_rows(self, row_specifier):
...
    def iterrows(self, *names):
...
    def _set_of_names_in_colnames(self, names):
...
    def remove_column(self, name):
...
    def remove_columns(self, names):
...
    def _convert_string_dtype(self, in_kind, out_kind, encode_decode_func):
...
    def convert_bytestring_to_unicode(self):
...
    def convert_unicode_to_bytestring(self):
...
    def keep_columns(self, names):
...
    def rename_column(self, name, new_name):
...
    def rename_columns(self, names, new_names):
...
    def _set_row(self, idx, colnames, vals):
...
    def add_row(self, vals=None, mask=None):
...
    def insert_row(self, index, vals=None, mask=None):
...
    def _replace_cols(self, columns):
...
    def update(self, other, copy=True):
...
    def argsort(self, keys=None, kind=None, reverse=False):
...
    def sort(self, keys=None, *, kind=None, reverse=False):
...
    def reverse(self):
...
    def round(self, decimals=0):
...
    def copy(self, copy_data=True):
...
    def __deepcopy__(self, memo=None):
...
    def __copy__(self):
...
    def __lt__(self, other):
...
    def __gt__(self, other):
...
    def __le__(self, other):
...
    def __ge__(self, other):
...
    def __eq__(self, other):
...
    def __ne__(self, other):
...
    def _rows_equal(self, other):
...
    def values_equal(self, other):
...
    @property
    def groups(self):
...
    def group_by(self, keys):
...
    def to_pandas(self, index=None, use_nullable_int=True):
...
    @classmethod
    def from_pandas(cls, dataframe, index=False, units=None):
...
    info = TableInfo()


class QTable(Table):

    def _is_mixin_for_table(self, col):
...
    def _convert_col_for_table(self, col):



###
Task:
Please provide the complete set of locations as either a class name, a function name, or a variable name. Note that if you include a class, you do NOT need to list its specific methods. You can include either the entire class or don't include the class name and instead include specific methods in the class. Pay attention that the response should be on the same format as the following example:
```
path1/file1.py
function: my_function_1
class: MyClass1
function: MyClass2.my_method

path2/file2.py
variable: my_var
function: MyClass3.my_method

path3/file3.py
function: my_function_2
function: my_function_3
function: MyClass4.my_method_1
class: MyClass5
```
Return multiple files and locations in a single response if need. Do not return any other information.
