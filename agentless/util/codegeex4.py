
import json
import gzip
import fire
import time
import requests
import loguru
from tqdm.auto import tqdm
import os

logger = loguru.logger

headers = {
    'Content-Type': 'application/json'
}

def generate(
        prompt, 
        url,
        do_sample=False,
        temperature=0.3,
        top_p=0.95,
        max_tokens=256,
        truncate=12800,
        stream=False,
        stop=["<|endoftext|>", "<|user|>", "<|observation|>", "<|assistant|>"],
        retries=3,
        delay=2,
        **kwargs
):
    data = {
        "prompt": prompt,
        "temperature": temperature,
        "top_p": top_p,
        "do_sample": do_sample,
        "max_tokens": max_tokens,
        "truncate": truncate,
        "stream": stream,
        "stop": stop,
    }
    attempts = 0
    while attempts < retries:
        try:
            response = requests.post(url, headers=headers, json=data, verify=False)
            response = response.json()
            return response['choices'][0]['text']
        except Exception as e:
            attempts += 1
            print(e)
            logger.error(f"Attempt {attempts}/{retries} failed with error: {e}. Retrying in {delay} seconds...")
            time.sleep(delay)
    raise Exception(f"All {retries} attempts failed for prompt: {prompt}")



def generate_with_openai(system_message, user_message):
    import openai
    from zhipuai import ZhipuAI

    # client = openai.OpenAI(api_key=os.environ.get("ZHIPU_API_KEY"))
    client = ZhipuAI(api_key=os.environ.get("ZHIPU_API_KEY"))
    batch_size = 3
    max_tokens = 256
    temperature = 0.3

    config = {
            "model": "codegeex-4",
            "n": batch_size,
            "max_tokens": max_tokens,
            "temperature": temperature,
             "messages":[
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_message},
    ]
    }

    response = client.chat.completions.create(**config)
    print(response.choices[0].message.content)
    print(response.usage.prompt_tokens)
    print(response.usage.completion_tokens)





def main():
    system_prompt = "You are an intelligent programming assistant named CodeGeeX. You will answer any questions users have about programming, coding, and computers, and provide code that is formatted correctly. "
    query = """
    # \nPlease review the following GitHub problem description and relevant files, and provide a set of locations that need to be edited to fix the issue.\nThe locations can be specified as class names, function or method names, or exact line numbers that require modification.\n\n### GitHub Problem Description ###\nPlease support header rows in RestructuredText output\n### Description\r\n\r\nIt would be great if the following would work:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> import sys\r\n>>> tbl = QTable({\'wave\': [350,950]*u.nm, \'response\': [0.7, 1.2]*u.count})\r\n>>> tbl.write(sys.stdout,  format="ascii.rst")\r\n===== ========\r\n wave response\r\n===== ========\r\n350.0      0.7\r\n950.0      1.2\r\n===== ========\r\n>>> tbl.write(sys.stdout,  format="ascii.fixed_width", header_rows=["name", "unit"])\r\n|  wave | response |\r\n|    nm |       ct |\r\n| 350.0 |      0.7 |\r\n| 950.0 |      1.2 |\r\n>>> tbl.write(sys.stdout,  format="ascii.rst", header_rows=["name", "unit"])\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\n  File "/usr/lib/python3/dist-packages/astropy/table/connect.py", line 129, in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\n  File "/usr/lib/python3/dist-packages/astropy/io/registry/core.py", line 369, in write\r\n    return writer(data, *args, **kwargs)\r\n  File "/usr/lib/python3/dist-packages/astropy/io/ascii/connect.py", line 26, in io_write\r\n    return write(table, filename, **kwargs)\r\n  File "/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py", line 856, in write\r\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\r\n  File "/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py", line 800, in get_writer\r\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\r\n  File "/usr/lib/python3/dist-packages/astropy/io/ascii/core.py", line 1719, in _get_writer\r\n    writer = Writer(**writer_kwargs)\r\nTypeError: RST.__init__() got an unexpected keyword argument \'header_rows\'\r\n```\r\n\r\n\r\n### Additional context\r\n\r\nRestructuredText output is a great way to fill autogenerated documentation with content, so having this flexible makes the life easier `:-)`\r\n\r\n\n\n\n###\n\n\n###\n\nPlease provide the class name, function or method name, or the exact line numbers that need to be edited.\n### Examples:\n```\nfull_path1/file1.py\nline: 10\nclass: MyClass1\nline: 51\n\nfull_path2/file2.py\nfunction: MyClass2.my_method\nline: 12\n\nfull_path3/file3.py\nfunction: my_function\nline: 24\nline: 156\n```\n\nReturn just the location(s)\n
    # """
    # query = "Provide edit locations"

    # Sample prompt 
    # prompt = f"<|assistant|>\n{system_prompt}\n<|user|>\n{query}\n"
    
    # taking prompt from file
    # with open("codegeex_inspect/prompt.txt", "r") as f:
    #     # load from f
    #     prompt = f.read()


    # url = "http://172.18.64.110:9090/v1/completions"
    # try:
    #     code = generate(prompt, url)
    #     logger.info(code)

    # except Exception as e:
    #     logger.error(e)

    generate_with_openai(system_message=system_prompt, user_message=query)


if __name__ == "__main__":
    main()